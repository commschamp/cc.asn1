/// @brief Updated read functionality
template <typename TIter>
comms::ErrorStatus read(TIter& iter, std::size_t len)
{
    auto es = Base::readUntilAndUpdateLen<FieldIdx_long>(iter, len);
    if (es != comms::ErrorStatus::Success) {
        return es;
    }

    readPrepare_long();

    auto remLen = len;
    if (field_long().doesExist()) {
        remLen = std::min(len, static_cast<std::size_t>(field_short().field_lenValue().value()));
    }

    es = Base::readFrom<FieldIdx_long>(iter, remLen);
    if (es != comms::ErrorStatus::Success) {
        return es;
    }

    if (!valid()) {
        return comms::ErrorStatus::InvalidMsgData;
    }

    return comms::ErrorStatus::Success;
}
