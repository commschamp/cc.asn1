#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test1/Message.h"
#include "test1/frame/Frame.h"
#include "cc_asn1/options/DefaultOptions.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();

    using Interface =
        test1::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    using Options = test1::options::DefaultOptionsT<cc_asn1::options::DefaultOptions>;

    using Msg1 = test1::message::Msg1<Interface, Options>;
    using Msg2 = test1::message::Msg2<Interface, Options>;
    using Msg3 = test1::message::Msg3<Interface, Options>;
    using Msg4 = test1::message::Msg4<Interface, Options>;
    using Msg5 = test1::message::Msg5<Interface, Options>;
    using Msg6 = test1::message::Msg6<Interface, Options>;
    using Msg7 = test1::message::Msg7<Interface, Options>;
    using Msg8 = test1::message::Msg8<Interface, Options>;
    using Msg9 = test1::message::Msg9<Interface, Options>;

    using Frame = test1::frame::Frame<Interface, test1::input::AllMessages<Interface, Options>, Options>;
    using MsgPtr = Frame::MsgPtr;

    template <typename TMsg>
    std::vector<std::uint8_t> writeMsg(const TMsg& msg, comms::ErrorStatus expEs = comms::ErrorStatus::Success)
    {
        std::vector<std::uint8_t> outBuf;
        Frame frame;
        outBuf.resize(frame.length(msg));
        auto writeIter = comms::writeIteratorFor<Interface>(&outBuf[0]);
        auto es = frame.write(msg, writeIter, outBuf.size());
        TS_ASSERT_EQUALS(es, expEs);
        return outBuf;
    }    

    MsgPtr readWriteTest(const std::uint8_t* buf, std::size_t bufSize, comms::ErrorStatus expEs = comms::ErrorStatus::Success)
    {
        Frame frame;
        Frame::MsgPtr msgPtr;
        auto readIter = comms::readIteratorFor<Interface>(&buf[0]);
        auto es = frame.read(msgPtr, readIter, bufSize);
        TS_ASSERT_EQUALS(es, expEs);
        if (es != comms::ErrorStatus::Success) {
            TS_ASSERT(!msgPtr);
            return msgPtr;
        }

        TS_ASSERT(msgPtr);
        msgPtr->refresh();
        auto outBuf = writeMsg(*msgPtr);
        TS_ASSERT_EQUALS(outBuf.size(), bufSize);
        TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), buf));        
        return msgPtr;
    }
};

void TestSuite::test1()
{
    do {
        static const std::uint8_t Buf[] = {
            0x1, // MsgId.M1
            0x1, // Length.Short
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize);
        TS_ASSERT(msgPtr);

        auto* msg1 = dynamic_cast<Msg1*>(msgPtr.get());
        TS_ASSERT(msg1 != nullptr);
        TS_ASSERT_EQUALS(msg1->field_length().getValue(), 1U);
    } while (false);

    do {
        static const std::uint8_t Buf[] = {
            0x1, // MsgId.M1
            0x82, // Length.Short
            0x01, 0x00 // Length.Long
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize);
        TS_ASSERT(msgPtr);

        auto* msg1 = dynamic_cast<Msg1*>(msgPtr.get());
        TS_ASSERT(msg1 != nullptr);
        TS_ASSERT_EQUALS(msg1->field_length().getValue(), 0x100);
    } while (false);    

    do {
        static const std::uint8_t Buf[] = {
            0x1, // MsgId.M1
            0x82, // Length.Short
            0x01,  // Length.Long (incomplete)
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize, comms::ErrorStatus::NotEnoughData);
        TS_ASSERT(!msgPtr);
    } while (false);       

    do {
        static const std::uint8_t Buf[] = {
            0x1, // MsgId.M1
            0x89, // Length.Short
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09  // Length.Long (too long)
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize, comms::ErrorStatus::InvalidMsgData);
        TS_ASSERT(!msgPtr);
    } while (false);    

    do {
        static const std::uint8_t Buf[] = {
            0x1, // MsgId.M1
            0xff, // Length.Short
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize, comms::ErrorStatus::NotEnoughData);
        TS_ASSERT(!msgPtr);
    } while (false);   

    do {
        Msg1 msg;
        Frame frame;
        TS_ASSERT_EQUALS(frame.length(msg), 2U);

        msg.field_length().setValue(0x100);
        TS_ASSERT_EQUALS(frame.length(msg), 4U);
    } while (false);   

    do {
        Msg1 msg;
        msg.field_length().field_short().field_flag().setBitValue_longForm(true);
        TS_ASSERT(msg.doRefresh());
        TS_ASSERT(msg.field_length().field_long().doesExist());
        TS_ASSERT_EQUALS(msg.field_length().field_short().field_lenValue().getValue(), 0x1);
    } while (false);     
}

void TestSuite::test2()
{
    do {
        static const std::uint8_t Buf[] = {
            0x2, // MsgId.M2
            0x1, 0x1, 0xff, // Boolean
            0x2, 0x2, 0x01, 0x02, // Integer
            0x4, 0x4, 0x01, 0x02, 0x03, 0x04, // OctetString
            0x5, 0x0, // Null
            0xC, 0x5, 'h', 'e', 'l', 'l', 'o', // Utf8String
            0x13, 0x5, 'h', 'e', 'l', 'l', 'o', // PrintableString
            0x16, 0x5, 'h', 'e', 'l', 'l', 'o', // Ia5String
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize);
        TS_ASSERT(msgPtr);

        auto* msg = dynamic_cast<Msg2*>(msgPtr.get());
        TS_ASSERT(msg != nullptr);
        TS_ASSERT(msg->field_boolean().field_value().isTrue());
        TS_ASSERT_EQUALS(msg->field_integer().field_value().value(), 0x0102);
        TS_ASSERT_EQUALS(msg->field_octetString().field_value().value(), std::vector<std::uint8_t>({0x01, 0x02, 0x03, 0x04}));
        TS_ASSERT_EQUALS(msg->field_utf8String().field_value().value(), std::string("hello"));
        TS_ASSERT_EQUALS(msg->field_printableString().field_value().value(), std::string("hello"));
        TS_ASSERT_EQUALS(msg->field_ia5String().field_value().value(), std::string("hello"));
    } while (false);
}

void TestSuite::test3()
{
    do {
        static const std::uint8_t Buf[] = {
            0x3, // MsgId.M3
            0x30, // Sequence Tag
            0x09, // Sequence Length
            0x2, 0x2, 0x01, 0x02, // Integer
            0x1, 0x1, 0xff, // Boolean
            0x5, 0x0, // Null
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize);
        TS_ASSERT(msgPtr);

        auto* msg = dynamic_cast<Msg3*>(msgPtr.get());
        TS_ASSERT(msg != nullptr);
        TS_ASSERT_EQUALS(msg->field_sequence().field_value().field_integer().field_value().value(), 0x0102);
        TS_ASSERT(msg->field_sequence().field_value().field_boolean().field_value().isTrue());
    } while (false);
}

void TestSuite::test4()
{
    do {
        static const std::uint8_t Buf[] = {
            0x4, // MsgId.M4
            0x30, // Sequence Tag
            0x11, // Sequence Length
            0x2, 0x2, 0x01, 0x02, // Integer
            0x1, 0x1, 0xff, // Boolean
            0x5, 0x0, // Null
            0x2, 0x1, 0x01, // Integer
            0x1, 0x1, 0x0, // Boolean
            0x5, 0x0, // Null
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize);
        TS_ASSERT(msgPtr);

        auto* msg = dynamic_cast<Msg4*>(msgPtr.get());
        TS_ASSERT(msg != nullptr);
        auto& list = msg->field_sequence().field_value().value();
        TS_ASSERT_EQUALS(list.size(), 2U);
        auto& mem0 = list[0];
        auto& mem1 = list[1];
        TS_ASSERT_EQUALS(mem0.field_integer().field_value().value(), 0x0102);
        TS_ASSERT(mem0.field_boolean().field_value().isTrue());
        TS_ASSERT_EQUALS(mem1.field_integer().field_value().value(), 0x01);
        TS_ASSERT(mem1.field_boolean().field_value().isFalse());
    } while (false);
}

void TestSuite::test5()
{
    do {
        static const std::uint8_t Buf[] = {
            0x5, // MsgId.M5
            0x31, // Set Tag
            0x07, // Set Length
            0x1, 0x1, 0x0ff, // Boolean
            0x2, 0x2, 0x01, 0x02, // Integer
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize);
        TS_ASSERT(msgPtr);

        auto* msg = dynamic_cast<Msg5*>(msgPtr.get());
        TS_ASSERT(msg != nullptr);
        auto& varList = msg->field_set().field_value().value();
        TS_ASSERT_EQUALS(varList.size(), 2U);
        auto& boolMem = varList[0].accessField_boolean();
        TS_ASSERT(boolMem.field_value().isTrue());        
        auto& intMem = varList[1].accessField_integer();
        TS_ASSERT_EQUALS(intMem.field_value().value(), 0x0102);
    } while (false);

    do {

        Msg5 msg;
        auto& varList = msg.field_set().field_value().value();
        varList.resize(3);
        varList[0].initField_null();
        varList[1].initField_integer().field_value().setValue(0x0102);
        varList[2].initField_boolean().field_value().setTrue();

        msg.doRefresh();

        static const std::uint8_t Buf[] = {
            0x5, // MsgId.M5
            0x31, // Set Tag
            0x09, // Set Length
            0x1, 0x1, 0x0ff, // Boolean
            0x2, 0x2, 0x01, 0x02, // Integer
            0x5, 0x0 // Null
        };
        static constexpr auto BufSize = std::extent<decltype(Buf)>::value;        

        auto outBuf = writeMsg(static_cast<const Interface&>(msg));
        TS_ASSERT_EQUALS(outBuf.size(), BufSize);
        TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf)));

    } while (false);
}

void TestSuite::test6()
{
    do {
        Msg6 msg;
        auto& stringsList = msg.field_set().field_value().value();
        stringsList.resize(2U);
        stringsList[0].field_value().value().assign(128U, 'a');
        stringsList[1].field_value().value() = "hello";

        msg.doRefresh();

        // The long string should be after the short one due to the long form of length
        TS_ASSERT_EQUALS(stringsList[0].field_value().value(), std::string("hello"));
    } while (false);
}

void TestSuite::test7()
{
    do {
        static const std::uint8_t Buf[] = {
            0x7, // MsgId.M7
            0x03, // BitString Tag
            0x03, // Length
            0x04, // Shift
            0xff, 0xf0, // bits
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize);
        TS_ASSERT(msgPtr);

        auto* msg = dynamic_cast<Msg7*>(msgPtr.get());
        TS_ASSERT(msg != nullptr);
        TS_ASSERT_EQUALS(msg->field_bitString().field_value().value(), 0xfff);
    } while (false);

    do {
        Msg7 msg;
        msg.field_bitString().field_value().value() = 0xfff;
        msg.field_bitString().field_shift().setValue(7U);
        msg.doRefresh();
        TS_ASSERT_EQUALS(msg.field_bitString().field_shift().getValue(), 0x4);
        static const std::uint8_t Buf[] = {
            0x7, // MsgId.M7
            0x03, // BitString Tag
            0x03, // Length
            0x04, // Shift
            0xff, 0xf0, // bits
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;
        TS_ASSERT_EQUALS(msg.field_bitString().field_value().length(), 2U);
        TS_ASSERT_EQUALS(msg.field_bitString().field_shift().length(), 1U);
        TS_ASSERT_EQUALS(msg.field_bitString().length(), 5U);
        TS_ASSERT_EQUALS(msg.field_bitString().lengthFrom<Msg7::Field_bitString::FieldIdx_shift>(), 3U);

        auto outBuf = writeMsg(msg);
        TS_ASSERT_EQUALS(outBuf.size(), BufSize);
        TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf)));
    } while (false);
}

void TestSuite::test8()
{
    do {
        static const std::uint8_t Buf[] = {
            0x8, // MsgId.M8
            0x03, // BitString Tag
            0x04, // Length
            0x04, // Shift
            0xff, 0xff, 0xf0, // bits
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize);
        TS_ASSERT(msgPtr);

        auto* msg = dynamic_cast<Msg8*>(msgPtr.get());
        TS_ASSERT(msg != nullptr);
        TS_ASSERT_EQUALS(msg->field_bitString().field_value().value(), std::vector<std::uint8_t>({0x0f, 0xff, 0xff}));
    } while (false);

    do {
        Msg8 msg;
        msg.field_bitString().field_value().value() = std::vector<std::uint8_t>({0x0f, 0xff, 0xff});
        msg.field_bitString().field_shift().setValue(7U);
        msg.doRefresh();
        TS_ASSERT_EQUALS(msg.field_bitString().field_shift().getValue(), 0x4);
        static const std::uint8_t Buf[] = {
            0x8, // MsgId.M8
            0x03, // BitString Tag
            0x04, // Length
            0x04, // Shift
            0xff, 0xff, 0xf0, // bits
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto outBuf = writeMsg(msg);
        TS_ASSERT_EQUALS(outBuf.size(), BufSize);
        TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf)));
    } while (false);
}

void TestSuite::test9()
{
    do {
        static const std::uint8_t Buf[] = {
            0x9, // MsgId.M9
            0x06, // ObjectIdentifier
            0x04, // Length
            0x32, // First + second id
            0x81, 0x00, // Third
            0x7f, // Fourth
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        auto msgPtr = readWriteTest(Buf, BufSize);
        TS_ASSERT(msgPtr);

        auto* msg = dynamic_cast<Msg9*>(msgPtr.get());
        TS_ASSERT(msg != nullptr);
        auto& valuesList = msg->field_objectIdentifier().field_value().value();
        TS_ASSERT_EQUALS(valuesList.size(), 4U);
        TS_ASSERT_EQUALS(valuesList[0].getValue(), 1U);
        TS_ASSERT_EQUALS(valuesList[1].getValue(), 10U);
        TS_ASSERT_EQUALS(valuesList[2].getValue(), 128U);
        TS_ASSERT_EQUALS(valuesList[3].getValue(), 127U);

        TS_ASSERT_EQUALS(msg->length(), BufSize - 1U);
    } while (false);
}
