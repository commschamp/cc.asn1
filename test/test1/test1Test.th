#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test1/Message.h"
#include "test1/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    // void test2();

    using Interface =
        test1::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    using Msg1 = test1::message::Msg1<Interface>;
    // using Msg2 = test1::message::Msg2<Interface>;
    using Frame = test1::frame::Frame<Interface>;
};

void TestSuite::test1()
{
    do {
        static const std::uint8_t Buf[] = {
            0x1, // MsgId.M1
            0x1, // Length.Short
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        Frame frame;
        Frame::MsgPtr msgPtr;
        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT(msgPtr);

        auto* msg1 = dynamic_cast<Msg1*>(msgPtr.get());
        TS_ASSERT(msg1 != nullptr);
        TS_ASSERT_EQUALS(msg1->field_length().getValue(), 1U);

        std::vector<std::uint8_t> outBuf;
        outBuf.resize(frame.length(*msg1));
        auto writeIter = comms::writeIteratorFor<Interface>(&outBuf[0]);
        es = frame.write(*msg1, writeIter, outBuf.size());
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(outBuf.size(), BufSize);
        TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf)));
    } while (false);

    do {
        static const std::uint8_t Buf[] = {
            0x1, // MsgId.M1
            0x82, // Length.Short
            0x01, 0x00 // Length.Long
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        Frame frame;
        Frame::MsgPtr msgPtr;
        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT(msgPtr);

        auto* msg1 = dynamic_cast<Msg1*>(msgPtr.get());
        TS_ASSERT(msg1 != nullptr);
        TS_ASSERT_EQUALS(msg1->field_length().getValue(), 0x100);

        std::vector<std::uint8_t> outBuf;
        outBuf.resize(frame.length(*msg1));
        auto writeIter = comms::writeIteratorFor<Interface>(&outBuf[0]);
        es = frame.write(*msg1, writeIter, outBuf.size());
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(outBuf.size(), BufSize);
        TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf)));        
    } while (false);    

    do {
        static const std::uint8_t Buf[] = {
            0x1, // MsgId.M1
            0x82, // Length.Short
            0x01,  // Length.Long (incomplete)
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        Frame frame;
        Frame::MsgPtr msgPtr;
        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::NotEnoughData);
        TS_ASSERT(!msgPtr);
    } while (false);       

    do {
        static const std::uint8_t Buf[] = {
            0x1, // MsgId.M1
            0x89, // Length.Short
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09  // Length.Long (too long)
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        Frame frame;
        Frame::MsgPtr msgPtr;
        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::InvalidMsgData);
        TS_ASSERT(!msgPtr);
    } while (false);    

    do {
        static const std::uint8_t Buf[] = {
            0x1, // MsgId.M1
            0xff, // Length.Short
        };
        static const auto BufSize = std::extent<decltype(Buf)>::value;

        Frame frame;
        Frame::MsgPtr msgPtr;
        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::NotEnoughData);
        TS_ASSERT(!msgPtr);
    } while (false);   

    do {
        Msg1 msg;
        Frame frame;
        TS_ASSERT_EQUALS(frame.length(msg), 2U);

        msg.field_length().setValue(0x100);
        TS_ASSERT_EQUALS(frame.length(msg), 4U);
    } while (false);   

    do {
        Msg1 msg;
        msg.field_length().field_short().field_flag().setBitValue_longForm(true);
        TS_ASSERT(msg.doRefresh());
        TS_ASSERT(msg.field_length().field_long().doesExist());
        TS_ASSERT_EQUALS(msg.field_length().field_short().field_lenValue().getValue(), 0x1);
    } while (false);     
}
